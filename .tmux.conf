# http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/
# http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2/
# /usr/share/doc/tmux/examples/*.conf

# changing the main key binding
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
# Allows us to use C-a a <command> to send commands to a TMUX session
# inside another TMUX session
#bind-key a send-prefix

# Scrollback 10000 lines
set -g history-limit 100000

# other key bindings
unbind %
bind | split-window -h
bind - split-window -v

# changing the mode-keys to vi
set-window-option -g mode-keys vi
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# auto window rename to program currently used
#set-window-option -g automatic-rename
set-window-option -g automatic-rename off
# Newer version
set-option -g allow-rename off
# Another solution is to disallow shell to rename terminal window.
# Eg in .zshrc: DISABLE_AUTO_TITLE=true
# Default new name for windows (remap c binding)
bind-key c new-window -n 'new'

# Terminal window title should indicate logged in server (not localhost) and tmux session name
set-option -g set-titles on
set-option -g set-titles-string "#T (#S)"

# rm mouse mode fail
set-option -g mode-mouse off

# For xterm-keys, see
# https://wiki.archlinux.org/index.php/Tmux#Setting_the_correct_term

# 256 colors
set -g default-terminal "screen-256color"

# clock
#set-window-option -g clock-mode-colour green
set-window-option -g clock-mode-style 24

# url browsing - requires urlview
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; run-shell "$TERMINAL -e 'cat /tmp/tmux-buffer | urlview'"

# Capture entire pane in text file (prompts for file name)
bind-key P command-prompt -p 'save history to filename:' -I '~/tmux_pane_capture' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

# I want to use shift-pgup/pgdn for scrolling as well
# Also important for terminal window titles
#set -g terminal-overrides 'xterm*:smcup@:rmcup@'
#set -g terminal-overrides 'xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC'
set -ga terminal-overrides ',rxvt*:xterm*:XT'

# urxvt tab like window switching (-n: no prior escape seq)
bind -n S-down new-window
bind -n S-left prev
bind -n S-right next
bind -n C-left swap-window -t -1
bind -n C-right swap-window -t +1

# Only constrain window size if smaller window is actually looking
setw -g aggressive-resize on

# Allows for faster key repetition - do not wait for escape sequence
set -s escape-time 0

# Activity monitoring
#setw -g monitor-activity on
#set -g visual-activity on

# Disable the status bar
#set -g status off

# Set status bar
set-option -g status-utf8 on
set -g status-bg black
set -g status-fg white
set -g status-keys vi
set -g status-justify left    # window list position
set -g status-interval 15       # update interval
#set -g status-left '#[fg=green]%H:%M|%d/%m' ##H'
#set -g status-left '#[fg=green]%H:%M|%d %b|#H' ##H'
set -g status-left '#[fg=green]%H:%M|#H' ##H'
#set -g status-left-length 24    # default 10
set -g status-left-length 12    # default 10
#set -g status-right '#[fg=yellow]#(cat /proc/loadavg | cut -d " " -f 1,2,3)'
#set -g status-right '#[fg=colour62]#(cat /proc/loadavg | cut -d " " -f 1,2,3)'
#set -g status-right '#[fg=blue]#(cat /proc/loadavg | cut -d " " -f 1,2,3)'
set -g status-right '#[fg=colour62]#(tmux-mem-cpu-load)'
set -g status-right-length 50   # default 40

# Highlight active window
#set-window-option -g window-status-current-bg red
#set-window-option -g window-status-current-fg colour226
set-window-option -g window-status-current-fg yellow

# Available colours are  black, red, green, yellow, blue, magenta, cyan, white, colour0 to colour255
# Create following bash script and execute in terminal to see colour0 to colour255
#
#   #!/usr/bin/env bash
#   for i in {0..255} ; do
#       printf "\x1b[38;5;${i}mcolour${i}\n"
#   done
#


## Sessions
# This doesn't work. Must have been for an earlier version
# People seem to be using bash scripts or tmuxinator
#
# http://stackoverflow.com/questions/5609192/how-to-set-up-tmux-so-that-it-starts-up-with-specified-windows-opened
# You can source different sessions from your .tmux.conf like so:
#
# # initialize sessions
# bind S source-file ~/.tmux/session1 
# bind s source-file ~/.tmux/session2
# And then format the sessions as you require:
#
# #session1
# new  -s SessionName -n WindowName Command
# neww -n foo/bar foo
# splitw -v -p 50 -t 0 bar
# selectw -t 1 
# selectp -t 0
# This would open 2 windows, the second of which would be named foo/bar and would be split vertically in half (50%) with foo running above bar. Focus would be in window 2 (foo/bar), top pane (foo).
#
# You can then start your preferred tmux session (in this case, session1) with <Prefix><Shift>s
#

#new -n work bash
#neww -n foo/bar bash
#splitw -v -p 50 -t 0 bash
#selectw -t 1
#selectp -t 0

