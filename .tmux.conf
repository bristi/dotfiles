# http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/
# http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2/
# /usr/share/doc/tmux/examples/*.conf

# Team tmux has annoying habit of changing commands or options with
# newer versions of tmux. Using following env var to differentiate
# And apparently brew release versions like 2.9a so added sed hack TODO: fix
# Alternatively use version_compare / vercmp from my .bashrc_functions
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6- | sed 's/[^0-9\.]//g')"
# DOESN't WORK: run-shell 'echo "Detected tmux version $TMUX_VERSION"'
# May be used like:
# if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
#   'set option this way' \
#   'otherwise set option this way'
#
# Note that this is migration from (DONT USE THIS ANYMORE!):
# if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 1\)' \
#   'set option this way' \
#   'otherwise set option this way'

# changing the main key binding
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
# Allows us to use C-a a <command> to send commands to a TMUX session
# inside another TMUX session
bind-key a send-prefix

# Scrollback 100000 lines
set -g history-limit 100000

# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
# Note that I set status-utf8 where statusbar is configured
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
  "set -g utf8 on; set -g mouse-utf8 on"

# Open new windows in same directory
bind c new-window -c "#{pane_current_path}"
# New keybindings for splits and open in same directory
unbind %
bind '"' split-window -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# changing the mode-keys to vi
set-window-option -g mode-keys vi
#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection
# bind-key syntax changed in 2.4
# < 2.4
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
  "bind-key -t vi-copy v   begin-selection; \
   bind-key -t vi-copy V   select-line; \
   bind-key -t vi-copy C-v rectangle-toggle; \
   bind-key -t vi-copy y   copy-pipe 'xclip -selection clipboard -in'"
# Newer versions
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  "bind-key -T copy-mode-vi v   send -X begin-selection; \
   bind-key -T copy-mode-vi V   send -X select-line; \
   bind-key -T copy-mode-vi C-v send -X rectangle-toggle; \
   bind-key -T copy-mode-vi y   send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'"

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# Bindings for mouse mode
# Following requires tmux >= 2.1
bind-key m set-option -g mouse on \; display 'Mouse: ON'
bind-key M set-option -g mouse off \; display 'Mouse: OFF'

# Set mouse mode off by default
# Note that command has changed in tmux >= 2.1
# The option mouse has replaced the previous 4 individual settings
#if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 1\)' 'set -g mouse off'
#if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 1\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'set -g mode-mouse off'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
  'set -g mouse off' \
  'set -g mode-mouse off; set -g mouse-select-pane off; \
   set -g mouse-resize-pane off; set -g mouse-select-window off'

# auto window rename to program currently used
set-window-option -g automatic-rename off
# Disallow shell renaming window (should be off by default since 2.7)
set-option -g allow-rename off
# Another solution is to disallow shell to rename terminal window.
# Eg in .zshrc: DISABLE_AUTO_TITLE=true

# Default new name for windows (remap c binding)
bind-key c new-window -n 'new'

# Terminal window title should indicate logged in server (not localhost) and tmux session name
set-option -g set-titles on
set-option -g set-titles-string "#T (#S)"

# For xterm-keys, see
# https://wiki.archlinux.org/index.php/Tmux#Setting_the_correct_term

# 256 colors
set -g default-terminal "screen-256color"

# Theming depending on hour of day might be fun?
# This is a start for inspiration (but certainly not what I want):
#   if-shell -F '["date +'%H'" &gt; 8 && "date +'%H'" &lt; 17]'
#       "set -g @colors-solarized 'light'"
#       "set -g @colors-solarized 'dark'"

# clock
#set-window-option -g clock-mode-colour green
set-window-option -g clock-mode-style 24

# url browsing - requires urlview
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; run-shell "$TERMINAL -e 'cat /tmp/tmux-buffer | urlview'"

# Capture entire pane in text file (prompts for file name)
bind-key P command-prompt -p 'save history to filename:' -I '~/tmux_pane_capture' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

# I want to use shift-pgup/pgdn for scrolling as well
# Also important for terminal window titles
#set -g terminal-overrides 'xterm*:smcup@:rmcup@'
#set -g terminal-overrides 'xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC'
set -ga terminal-overrides ',rxvt*:xterm*:XT'

# urxvt tab like window switching (-n: no prior escape seq)
bind -n S-down new-window
bind -n S-left prev
bind -n S-right next
bind -n C-left swap-window -t -1
bind -n C-right swap-window -t +1

# Only constrain window size if smaller window is actually looking
setw -g aggressive-resize on

# Allows for faster key repetition - do not wait for escape sequence
set -s escape-time 0

# Activity monitoring
#setw -g monitor-activity on
#set -g visual-activity on

# Disable the status bar
#set -g status off

# Set status bar
# I think the utf8 explicit settings was removed in 2.2 (but can't
# find status-utf8 in CHANGES..)
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
  'set-option -g status-utf8 on'
set -g status-bg black
set -g status-fg white
set -g status-keys vi
set -g status-justify left    # window list position
set -g status-interval 15       # update interval
#set -g status-left '#[fg=green]%H:%M|%d/%m' ##H'
#set -g status-left '#[fg=green]%H:%M|%d %b|#H' ##H'
set -g status-left '#[fg=green]%H:%M|#H' ##H'
#set -g status-left-length 24    # default 10
set -g status-left-length 12    # default 10
#set -g status-right '#[fg=yellow]#(cat /proc/loadavg | cut -d " " -f 1,2,3)'
#set -g status-right '#[fg=colour62]#(cat /proc/loadavg | cut -d " " -f 1,2,3)'
#set -g status-right '#[fg=blue]#(cat /proc/loadavg | cut -d " " -f 1,2,3)'
set -g status-right '#[fg=colour62]#(tmux-mem-cpu-load)'
set -g status-right-length 50   # default 40

# Highlight active window
#set-window-option -g window-status-current-bg red
#set-window-option -g window-status-current-fg colour226
#set-window-option -g window-status-current-fg yellow
# Note that from version 1.9 the above stopped working and
# I needed to use new style type options:
#   https://github.com/tmux/tmux/wiki/FAQ#how-do-i-translate--fg--bg-and--attr-options-into--style-options
# The style type options seem to work fine with 1.8 as well
set-window-option -g window-status-current-style fg=yellow

# Available colours are  black, red, green, yellow, blue, magenta, cyan, white, colour0 to colour255
# Create following bash script and execute in terminal to see colour0 to colour255
#
#   #!/usr/bin/env bash
#   for i in {0..255} ; do
#       printf "\x1b[38;5;${i}mcolour${i}\n"
#   done
#


## Sessions
# This doesn't work. Must have been for an earlier version
# People seem to be using bash scripts or tmuxinator
#
# http://stackoverflow.com/questions/5609192/how-to-set-up-tmux-so-that-it-starts-up-with-specified-windows-opened
# You can source different sessions from your .tmux.conf like so:
#
# # initialize sessions
# bind S source-file ~/.tmux/session1 
# bind s source-file ~/.tmux/session2
# And then format the sessions as you require:
#
# #session1
# new  -s SessionName -n WindowName Command
# neww -n foo/bar foo
# splitw -v -p 50 -t 0 bar
# selectw -t 1 
# selectp -t 0
# This would open 2 windows, the second of which would be named foo/bar and would be split vertically in half (50%) with foo running above bar. Focus would be in window 2 (foo/bar), top pane (foo).
#
# You can then start your preferred tmux session (in this case, session1) with <Prefix><Shift>s
#

#new -n work bash
#neww -n foo/bar bash
#splitw -v -p 50 -t 0 bash
#selectw -t 1
#selectp -t 0

