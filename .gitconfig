# Get more inspiration : https://gist.github.com/pksunkara/988716
[core]
  autocrlf = input
  whitespace = fix,space-before-tab,tab-in-indent,trailing-space
	excludesfile = /Users/brian/.gitignore_global
  # Use less with -FRX to quit if output less than one screen
  # It is also possible to use
  # * git --no-pager <cmd>
  # * git --add-pager <cmd>
  # Note that GIT_PAGER would take precedence if set!
  # Note that to deactivate eg -F option from environment use -+F
  # Note that git would normally also use -S to truncate long lines
  # Note that in shell we could eg GIT_PAGER='less -RFXS' git br
  pager = less -FRX
  # Note that GIT_EDITOR would take precedence if set!
  editor = nvim
[apply]
  whitespace = fix
#[url "https://"]
#  insteadOf = git://
[alias]
  br = branch -avv
  bra = !"echo 'Known branches:' && git br && echo 'Local branches merged to current branch:' && git branch --merged && echo 'Local branches NOT merged to current branch:' && git branch --no-merged"
  #ci = commit
  co = checkout
  df = diff
  st = status
  ap = add -p
  g = grep -I
  # List tracked files
  ls = ls-files
  # List untracked, and not ignored, files
  uls = ls-files --others --exclude-standard
  # Some quickies
  d = difftool
  pp = !"echo 'Pull'; git pull && echo 'Push'; git push"
  fp = fetch --all --prune
  #fr = !"git fetch && git rebase -i origin/master"
  #pr = git pull --rebase
  #rb = rbranch
  #rv = review

  ## Logs and Commit history
  # Pretty short log with graph
  l = log --graph --pretty=onelinec --date=short
  # Prettier / first Parent. For just merges done to branch - avoid feature branch commit clutter
  lp = log --graph --pretty=onelinec --date=short --first-parent
  # For all branches
  la = log --graph --pretty=onelinec --date=short --all
  # Just decorated commits for all branches - see relationships between branches/tags
  ll = log --graph --pretty=onelinec --date=short --simplify-by-decoration --all
  # More info per commit
  lol = log --graph --pretty=threeline --date=short
  # For all branches, with more info per commit
  lola = log --graph --pretty=threeline --date=short --all
  # Even more info per commit (amount of changes per file)
  lols = log --graph --pretty=threeline --date=short --stat
  # Entire diff per commit
  lold = log --pretty=threeline -p
  # Full commit messages with detailed info
  lolol = log --graph --decorate --pretty=fuller --abbrev-commit --name-status --find-renames
  lolola = log --graph --decorate --pretty=fuller --abbrev-commit --name-status --find-renames --all
  # List of stashes with date and time
  # Note: output flags are same as for log, so see options there
  stal = stash list --pretty=oneline --date=default --abbrev-commit
  # Commits since last work day - daily standup
  standup = !"git log --all --no-merges --graph --date=short --pretty=onelinec --since=$(if [[ Mon == $(date +%a) ]]; then echo last friday; else echo yesterday; fi)"
  #standup3 = !"git log --all --no-merges --graph --date=short --pretty=onelinec --since=$(if [[ Mon == $(date +%a) ]]; then echo last wednesday; else echo \\"3 days ago\\"; fi)"
  # Eg git standupx "2 weeks ago"
  standupx = !"git log --all --no-merges --graph --date=short --pretty=onelinec --since "
  ##
  ## Recover dangling commits, dropped stashes, ...
  ## (of course, check reflog if loss happened recently)
  ## Note that these aliases are intentionally annoyingly long
  # All (recoverable) commits
  # ~Â https://stackoverflow.com/a/6455586
  recov-log-all = log --graph --decorate --pretty=oneline --abbrev-commit --all $(git fsck --no-reflogs | grep commit | cut -d' ' -f3)

  ## Logs/history for individual files
  # History for single file
  hf = log --follow -p --
  # All commits that has changed a file - over all branches, reflog and stashes
  # Also works with gitk (consider also using flag --author-date-order)
  cf = log --all --first-parent --remotes --reflog --
  # Same, but as short list
  cfl = log --graph --pretty=onelinec --date=short --all --first-parent --remotes --reflog --
  # Diffs for file in all commits that has changed file - over all branches, reflog and stashes
  cfp = log --all --first-parent --remotes --reflog -p --

  ## Modify working tree / index
  # Unstage file(s) and remove(!) from index. Leave file(s) in working tree alone.
  unadd = rm --cached --
  # Same but with entire directory (recursively)
  unaddd = rm --cached -r --
  # Unstage file(s). Leave index and working tree alone.
  #   Before git 1.8.2
  #unstage = reset HEAD --
  #   At or after git 1.8.2
  unstage = reset --
  # Undo a commit (soft reset to parent HEAD)
  uncommit = reset --soft HEAD^1 --
  # Discard changes to file(s) in working tree
  unmodify = checkout --
  # Unmerge, if MERGE_HEAD exist. Otherwise use git reset --merge (older and more general).
  unmerge = merge --abort

  ## Other stuff
  # Housekeeping pointers
  housekeep = !"echo 'Local and remote branches (Remember to sync from origin `git fetch --all --prune`):'; git branch -a && echo 'Branches already merged with HEAD:'; git branch --merged"
  ## Some info
  tellme = !"git st ; git bra ; echo 'Decorated commits for all branches:' ; git lold"
  showconflicted = !"git ls-files --unmerged | cut -f2 | sort -u"
  editconflicted = !"f() { git ls-files --unmerged | cut -f2 | sort -u ; }; $EDITOR `f`"
  details = cat-file -p
  root = rev-parse --show-cdup
  path = rev-parse --show-toplevel
  upstream = rev-parse --symbolic-full-name --abbrev-ref=strict HEAD@{u}
  # Following may require explicit branch, eg origin/develop. And remember to fetch first..
  originlogdiff = log HEAD..origin
  origindiff = diff HEAD...origin
  ## Provider (gitlab/github/..) specifics
  # A gitlab merge request as local branch
  # eg. `git glmr origin 42` will create and checkout branch (with merge request 42) 'mr-origin-42'
  glmr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -
  # A github pull request as local branch
  # eg. `git ghpr origin 42` will create and checkout branch (with pull request 42) 'pr-origin-42'
  ghpr = !sh -c 'git fetch $1 pull/$2/head:pr-$1-$2 && git checkout pr-$1-$2' -
[color]
  ui = auto
  #diff = auto
  #status = auto
  #branch = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  log = true
  tool = vimdiff
[filter "media"]
  clean = git-media-clean %f
  smudge = git-media-smudge %f
[diff]
  tool = vimdiff
[difftool]
  prompt = false
[push]
  default = simple
[include]
  path = .gitconfig.local
[pretty]
  # colors are at least: normal, black, red, green, yellow, blue, magenta, cyan, white
  # attributes: bold, dim, ul, blink, reverse
  # eg %C(bold yellow)
  # Note that to get default color output for placeholder, eg differentiated colors for %d, use %C(auto)
  #
  # One line, with date
  onelinem = format:%C(auto,yellow)%h %C(auto,blue)%>(21,trunc)%ai%C(auto)%d
  # One line, with short hash, gpg, date, author and subject
  onelineg = format:%C(auto,yellow)%h %C(auto,magenta)%G? %C(auto,blue)%>(12,trunc)%ad %C(auto,cyan)%<(7,trunc)%aN%C(auto,reset)%s%C(auto)%d
  # One line, with short hash, rel date, author and subject
  onelinec = format:%C(auto,yellow)%h %C(auto,blue)%>(12,trunc)%ar %C(auto,cyan)%<(7,trunc)%aN%C(auto,reset)%s%C(auto)%d
  # Two lines, with 1: short hash, subject + 2: date, rel date, author
  #twoline = format:%C(yellow)%h%Creset %s%n        %Cblue[%ad] %ar by %an <%ae>
  twoline = format:%C(yellow)%h %C(auto,magenta)%G? %Creset%s%C(auto)%d%n  %Cblue[%ad] %ar %C(cyan)%an <%ae>
  threeline = format:%C(yellow)%h %C(auto,magenta)%G? %Creset%s%C(auto)%d%n  %Cblue[%ad] %ar %C(cyan)%an <%ae>%n
[pager]
  # Always pager for branch
  #branch = false
  # Add -S (truncate long lines) to branch
  # * The -E (QUIT-AT-EOF) because adding -S made less wait so that user
  #   has chance to see truncated text (override -F?)
  branch = less -FRXSE
  log = less -FRXS
