# Get more inspiration : https://gist.github.com/pksunkara/988716
[core]
  autocrlf = input
  whitespace = fix,space-before-tab,tab-in-indent,trailing-space
  excludesfile = ~/.gitignore_global
  editor = vim
[apply]
  whitespace = fix
#[url "https://"]
#  insteadOf = git://
[alias]
  br = branch -avv
  bra = !"echo 'Known branches:' && git br && echo 'Local branches merged to current branch:' && git branch --merged && echo 'Local branches NOT merged to current branch:' && git branch --no-merged"
  #ci = commit
  #co = checkout
  #df = diff
  g = grep -I
  lg = log -p
  # Commit history
  #lol = log --graph --decorate --pretty=oneline --abbrev-commit
  #lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  lol = log --graph --pretty=onelinec --date=short
  # More info per commit
  lols = log --graph --pretty=threeline --date=short
  # Prettier / first Parent. For just merges done to branch - avoid feature branch commit clutter
  lolp = log --graph --pretty=onelinec --date=short --first-parent
  # For all branches
  lola = log --graph --pretty=onelinec --date=short --all
  # Just decorated commits for all branches - see relationships between branches/tags
  lold = log --graph --pretty=onelinec --date=short --simplify-by-decoration --all
  # For all branches, with more info per commit
  lolsa = log --graph --pretty=threeline --date=short --all
  # Full commit messages with detailed info
  lolol = log --graph --decorate --pretty=full --abbrev-commit --name-status --find-renames
  lolola = log --graph --decorate --pretty=full --abbrev-commit --name-status --find-renames --all
  # Unstage file(s) and remove(!) from index. Leave file(s) in working tree alone.
  unadd = rm --cached --
  # Unstage file(s). Leave index and working tree alone.
  unstage = reset HEAD --
  # Discard changes to file(s) in working tree
  unmod = checkout --
  # Other stuff
  ls = ls-files
  d = difftool
  pp = !"echo 'Pull'; git pull && echo 'Push'; git push"
  fp = fetch --all --prune
  #rb = rbranch
  #rv = review
  st = status
  # History for single file
  hf = log --follow -p --
  # All commits that has changed a file - over all branches, reflog and stashes
  # Also works with gitk (consider also using flag --author-date-order)
  cf = log --all --first-parent --remotes --reflog --
  # Same, but as short list
  cfl = log --graph --pretty=onelinec --date=short --all --first-parent --remotes --reflog --
  # Diffs for file in all commits that has changed file - over all branches, reflog and stashes
  cfp = log --all --first-parent --remotes --reflog -p --
  # Housekeeping pointers
  housekeep = !"echo 'Local and remote branches (Remember to sync from origin `git fetch --all --prune`):'; git branch -a && echo 'Branches already merged with HEAD:'; git branch --merged"
  # Some info
  tellme = !"git st ; git bra ; echo 'Decorated commits for all branches:' ; git lold"
[color]
  ui = auto
  #diff = auto
  #status = auto
  #branch = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  log = true
  tool = vimdiff
[diff]
  tool = vimdiff
[difftool]
  prompt = false
[push]
  default = simple
[include]
  path = .gitconfig.local
[pretty]
  # colors are at least: normal, black, red, green, yellow, blue, magenta, cyan, white
  # attributes: bold, dim, ul, blink, reverse
  # eg %C(bold yellow)
  # Note that to get default color output for placeholder, eg differentiated colors for %d, use %C(auto)
  #
  # One line, with short hash, gpg, date, author and subject
  onelineg = format:%C(auto,yellow)%h %C(auto,magenta)%G? %C(auto,blue)%>(12,trunc)%ad %C(auto,cyan)%<(7,trunc)%aN%C(auto,reset)%s%C(auto)%d
  # One line, with short hash, rel date, author and subject
  onelinec = format:%C(auto,yellow)%h %C(auto,blue)%>(12,trunc)%ar %C(auto,cyan)%<(7,trunc)%aN%C(auto,reset)%s%C(auto)%d
  # Two lines, with 1: short hash, subject + 2: date, rel date, author
  #twoline = format:%C(yellow)%h%Creset %s%n        %Cblue[%ad] %ar by %an <%ae>
  twoline = format:%C(yellow)%h %C(auto,magenta)%G? %Creset%s%C(auto)%d%n  %Cblue[%ad] %ar %C(cyan)%an <%ae>
  threeline = format:%C(yellow)%h %C(auto,magenta)%G? %Creset%s%C(auto)%d%n  %Cblue[%ad] %ar %C(cyan)%an <%ae>%n
